{"version":3,"file":"ContractId.js","sources":["../../src/contract/ContractId.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport * as entity_id from \"../EntityIdHelper.js\";\nimport Key from \"../Key.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport CACHE from \"../Cache.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport { arrayEqual } from \"../array.js\";\nimport Long from \"long\";\nimport { isLongZeroAddress } from \"../util.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency contract on Hedera.\n */\nexport default class ContractId extends Key {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     * @param {Uint8Array=} evmAddress\n     */\n    constructor(props, realm, num, evmAddress) {\n        super();\n\n        const result = entity_id.constructor(props, realm, num);\n\n        this.shard = result.shard;\n        this.realm = result.realm;\n        this.num = result.num;\n\n        this.evmAddress = evmAddress != null ? evmAddress : null;\n\n        /**\n         * @type {string | null}\n         */\n        this._checksum = null;\n    }\n\n    /**\n     * @description This handles both long-zero format and evm address format addresses.\n     * If an actual evm address is passed, please use `ContractId.populateAccountNum(client)` method\n     * to get the actual `num` value, since there is no cryptographic relation to the evm address\n     * and cannot be populated directly\n     * @param {Long | number} shard\n     * @param {Long | number} realm\n     * @param {string} evmAddress\n     * @returns {ContractId}\n     */\n    static fromEvmAddress(shard, realm, evmAddress) {\n        if (isLongZeroAddress(hex.decode(evmAddress))) {\n            return new ContractId(...entity_id.fromSolidityAddress(evmAddress));\n        } else {\n            return new ContractId(shard, realm, 0, hex.decode(evmAddress));\n        }\n    }\n\n    /**\n     * @param {string} text\n     * @returns {ContractId}\n     */\n    static fromString(text) {\n        const result = entity_id.fromStringSplitter(text);\n\n        if (Number.isNaN(result.shard) || Number.isNaN(result.realm)) {\n            throw new Error(\"invalid format for entity ID\");\n        }\n\n        const shard =\n            result.shard != null ? Long.fromString(result.shard) : Long.ZERO;\n        const realm =\n            result.realm != null ? Long.fromString(result.realm) : Long.ZERO;\n        const [num, evmAddress] =\n            result.numOrHex.length < 40\n                ? [Long.fromString(result.numOrHex), undefined]\n                : [Long.ZERO, hex.decode(result.numOrHex)];\n\n        return new ContractId(shard, realm, num, evmAddress);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IContractID} id\n     * @returns {ContractId}\n     */\n    static _fromProtobuf(id) {\n        const contractId = new ContractId(\n            id.shardNum != null ? id.shardNum : 0,\n            id.realmNum != null ? id.realmNum : 0,\n            id.contractNum != null ? id.contractNum : 0,\n        );\n\n        return contractId;\n    }\n\n    /**\n     * @returns {string | null}\n     */\n    get checksum() {\n        return this._checksum;\n    }\n\n    /**\n     * @description Gets the actual `num` field of the `ContractId` from the Mirror Node.\n     * Should be used after generating `ContractId.fromEvmAddress()` because it sets the `num` field to `0`\n     * automatically since there is no connection between the `num` and the `evmAddress`\n     * @param {Client} client\n     * @returns {Promise<ContractId>}\n     */\n    async populateAccountNum(client) {\n        if (this.evmAddress === null) {\n            throw new Error(\"field `evmAddress` should not be null\");\n        }\n        const mirrorUrl = client.mirrorNetwork[0].slice(\n            0,\n            client.mirrorNetwork[0].indexOf(\":\"),\n        );\n\n        /* eslint-disable */\n        const url = `https://${mirrorUrl}/api/v1/contracts/${hex.encode(\n            this.evmAddress,\n        )}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const mirrorAccountId = data.contract_id;\n\n        this.num = Long.fromString(\n            mirrorAccountId.slice(mirrorAccountId.lastIndexOf(\".\") + 1),\n        );\n        /* eslint-enable */\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `validateChecksum` instead\n     * @param {Client} client\n     */\n    validate(client) {\n        console.warn(\"Deprecated: Use `validateChecksum` instead\");\n        this.validateChecksum(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    validateChecksum(client) {\n        entity_id.validateChecksum(\n            this.shard,\n            this.realm,\n            this.num,\n            this._checksum,\n            client,\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ContractId}\n     */\n    static fromBytes(bytes) {\n        return ContractId._fromProtobuf(\n            HieroProto.proto.ContractID.decode(bytes),\n        );\n    }\n\n    /**\n     * @deprecated - Use `fromEvmAddress` instead\n     * @param {string} address\n     * @returns {ContractId}\n     */\n    static fromSolidityAddress(address) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        if (isLongZeroAddress(hex.decode(address))) {\n            return new ContractId(...entity_id.fromSolidityAddress(address));\n        } else {\n            return this.fromEvmAddress(0, 0, address);\n        }\n    }\n\n    /**\n     * @returns {string}\n     */\n    toSolidityAddress() {\n        if (this.evmAddress != null) {\n            return hex.encode(this.evmAddress);\n        } else {\n            return entity_id.toSolidityAddress([\n                this.shard,\n                this.realm,\n                this.num,\n            ]);\n        }\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.IContractID}\n     */\n    _toProtobuf() {\n        return {\n            contractNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n            evmAddress: this.evmAddress,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        if (this.evmAddress != null) {\n            return `${this.shard.toString()}.${this.realm.toString()}.${hex.encode(\n                this.evmAddress,\n            )}`;\n        } else {\n            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n        }\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {string}\n     */\n    toStringWithChecksum(client) {\n        return entity_id.toStringWithChecksum(this.toString(), client);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.ContractID.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * @returns {ContractId}\n     */\n    clone() {\n        const id = new ContractId(this);\n        id._checksum = this._checksum;\n        id.evmAddress = this.evmAddress;\n        return id;\n    }\n\n    /**\n     * @param {ContractId} other\n     * @returns {number}\n     */\n    compare(other) {\n        return entity_id.compare(\n            [this.shard, this.realm, this.num],\n            [other.shard, other.realm, other.num],\n        );\n    }\n\n    /**\n     * @param {this} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        let evmAddresses = false;\n        if (this.evmAddress != null && other.evmAddress != null) {\n            evmAddresses = arrayEqual(this.evmAddress, other.evmAddress);\n        }\n\n        return (\n            this.shard.eq(other.shard) &&\n            this.realm.eq(other.realm) &&\n            this.num.eq(other.num) &&\n            evmAddresses\n        );\n    }\n\n    /**\n     * @returns {HieroProto.proto.IKey}\n     */\n    _toProtobufKey() {\n        return {\n            contractID: this._toProtobuf(),\n        };\n    }\n\n    /**\n     * @param {HieroProto.proto.IContractID} key\n     * @returns {ContractId}\n     */\n    static __fromProtobufKey(key) {\n        return ContractId._fromProtobuf(key);\n    }\n}\n\nCACHE.setContractId((key) => ContractId.__fromProtobufKey(key));\n"],"names":["ContractId","Key","constructor","props","realm","num","evmAddress","super","result","entity_id.constructor","this","shard","_checksum","fromEvmAddress","isLongZeroAddress","hex.decode","entity_id.fromSolidityAddress","fromString","text","entity_id.fromStringSplitter","Number","isNaN","Error","Long","ZERO","numOrHex","length","undefined","_fromProtobuf","id","shardNum","realmNum","contractNum","checksum","populateAccountNum","client","url","mirrorNetwork","slice","indexOf","hex.encode","response","fetch","mirrorAccountId","json","contract_id","lastIndexOf","validate","console","warn","validateChecksum","entity_id.validateChecksum","fromBytes","bytes","HieroProto","proto","ContractID","decode","fromSolidityAddress","address","toSolidityAddress","entity_id.toSolidityAddress","_toProtobuf","toString","toStringWithChecksum","entity_id.toStringWithChecksum","toBytes","encode","finish","clone","compare","other","entity_id.compare","equals","evmAddresses","arrayEqual","eq","_toProtobufKey","contractID","__fromProtobufKey","key","CACHE","setContractId"],"mappings":"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"}