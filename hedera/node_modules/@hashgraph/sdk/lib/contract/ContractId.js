import{constructor as r,fromSolidityAddress as t,fromStringSplitter as s,validateChecksum as e,toSolidityAddress as o,toStringWithChecksum as i,compare as m}from"../EntityIdHelper.js";import n from"../Key.js";import*as h from"@hashgraph/proto";import u from"../Cache.js";import{decode as a,encode as d}from"../encoding/hex.js";import{arrayEqual as l}from"../array.js";import c from"long";import{isLongZeroAddress as f}from"../util.js";class v extends n{constructor(t,s,e,o){super();const i=r(t,s,e);this.shard=i.shard,this.realm=i.realm,this.num=i.num,this.evmAddress=null!=o?o:null,this._checksum=null}static fromEvmAddress(r,s,e){return f(a(e))?new v(...t(e)):new v(r,s,0,a(e))}static fromString(r){const t=s(r);if(Number.isNaN(t.shard)||Number.isNaN(t.realm))throw new Error("invalid format for entity ID");const e=null!=t.shard?c.fromString(t.shard):c.ZERO,o=null!=t.realm?c.fromString(t.realm):c.ZERO,[i,m]=t.numOrHex.length<40?[c.fromString(t.numOrHex),void 0]:[c.ZERO,a(t.numOrHex)];return new v(e,o,i,m)}static _fromProtobuf(r){return new v(null!=r.shardNum?r.shardNum:0,null!=r.realmNum?r.realmNum:0,null!=r.contractNum?r.contractNum:0)}get checksum(){return this._checksum}async populateAccountNum(r){if(null===this.evmAddress)throw new Error("field `evmAddress` should not be null");const t=`https://${r.mirrorNetwork[0].slice(0,r.mirrorNetwork[0].indexOf(":"))}/api/v1/contracts/${d(this.evmAddress)}`,s=await fetch(t),e=(await s.json()).contract_id;return this.num=c.fromString(e.slice(e.lastIndexOf(".")+1)),this}validate(r){console.warn("Deprecated: Use `validateChecksum` instead"),this.validateChecksum(r)}validateChecksum(r){e(this.shard,this.realm,this.num,this._checksum,r)}static fromBytes(r){return v._fromProtobuf(h.proto.ContractID.decode(r))}static fromSolidityAddress(r){return f(a(r))?new v(...t(r)):this.fromEvmAddress(0,0,r)}toSolidityAddress(){return null!=this.evmAddress?d(this.evmAddress):o([this.shard,this.realm,this.num])}_toProtobuf(){return{contractNum:this.num,shardNum:this.shard,realmNum:this.realm,evmAddress:this.evmAddress}}toString(){return null!=this.evmAddress?`${this.shard.toString()}.${this.realm.toString()}.${d(this.evmAddress)}`:`${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`}toStringWithChecksum(r){return i(this.toString(),r)}toBytes(){return h.proto.ContractID.encode(this._toProtobuf()).finish()}clone(){const r=new v(this);return r._checksum=this._checksum,r.evmAddress=this.evmAddress,r}compare(r){return m([this.shard,this.realm,this.num],[r.shard,r.realm,r.num])}equals(r){let t=!1;return null!=this.evmAddress&&null!=r.evmAddress&&(t=l(this.evmAddress,r.evmAddress)),this.shard.eq(r.shard)&&this.realm.eq(r.realm)&&this.num.eq(r.num)&&t}_toProtobufKey(){return{contractID:this._toProtobuf()}}static __fromProtobufKey(r){return v._fromProtobuf(r)}}u.setContractId((r=>v.__fromProtobufKey(r)));export{v as default};
//# sourceMappingURL=ContractId.js.map
