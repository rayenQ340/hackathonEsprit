import e,{TRANSACTION_REGISTRY as t}from"../transaction/Transaction.js";class n extends e{constructor(e){super(),this._nodeId=null!=e?.nodeId?e.nodeId:null}static _fromProtobuf(t,o,d,r,s){const a=s[0].nodeDelete;return e._fromProtobufTransactions(new n({nodeId:null!=a.nodeId?a.nodeId:void 0}),t,o,d,r,s)}setNodeId(e){return this._nodeId=e,this}get nodeId(){return this._nodeId}_execute(e,t){return e.addressBook.deleteNode(t)}_getTransactionDataCase(){return"nodeDelete"}_makeTransactionData(){return{nodeId:null!=this._nodeId?this._nodeId:null}}_getLogId(){return`NodeDeleteTransaction:${this._transactionIds.current.validStart.toString()}`}}t.set("nodeDelete",n._fromProtobuf);export{n as default};
//# sourceMappingURL=NodeDeleteTransaction.js.map
