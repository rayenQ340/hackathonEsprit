import e from"long";import{decode as r,encode as t}from"./encoding/hex.js";import n from"./BadEntityIdError.js";import{safeView as o,convertToNumber as l}from"./util.js";import i from"./base32.js";import*as s from"@hashgraph/proto";import u from"./PublicKey.js";import{arrayify as a}from"@ethersproject/bytes";const c=/"^(0|(?:[1-9]\\d*))\\.(0|(?:[1-9]\\d*))\\.(0|(?:[1-9]\\d*))(?:-([a-z]{5}))?$/,m=/^(\d+)(?:\.(\d+)\.([a-fA-F0-9]+))?(?:-([a-z]{5}))?$/;function f(r,t,n){if(null==t&&null!=n||null!=t&&null==n)throw new Error("invalid entity ID");const[o,l,i]="number"==typeof r||e.isLong(r)?[null!=n?e.fromValue(r):e.ZERO,null!=t?e.fromValue(t):e.ZERO,null!=n?e.fromValue(n):e.fromValue(r)]:[null!=r.shard?e.fromValue(r.shard):e.ZERO,null!=r.realm?e.fromValue(r.realm):e.ZERO,e.fromValue(r.num)];if(o.isNegative()||l.isNegative()||i.isNegative())throw new Error("negative numbers are not allowed in IDs");return{shard:o,realm:l,num:i}}function h(e,r){let t=e[0].compare(r[0]);return 0!=t?t:(t=e[1].compare(r[1]),0!=t?t:e[2].compare(r[2]))}function d(e){const r=m.exec(e);if(null==r)throw new Error(`failed to parse entity id: ${e}`);return null==r[2]&&null==r[3]?{shard:"0",realm:"0",numOrHex:r[1],checksum:r[4]}:{shard:r[1],realm:r[2],numOrHex:r[3],checksum:r[4]}}function g(r){const t=d(r);if(Number.isNaN(t.shard)||Number.isNaN(t.realm)||Number.isNaN(t.numOrHex))throw new Error("invalid format for entity ID");return{shard:null!=t.shard?e.fromString(t.shard):e.ZERO,realm:null!=t.realm?e.fromString(t.realm):e.ZERO,num:e.fromString(t.numOrHex),checksum:t.checksum}}function w(t){const n=t.startsWith("0x")?r(t.slice(2)):r(t);if(20!==n.length)throw new Error(`Invalid hex encoded solidity address length:\n                expected length 40, got length ${t.length}`);return[e.fromBytesBE([0,0,0,0,...n.slice(0,4)]),e.fromBytesBE(Array.from(n.slice(4,12))),e.fromBytesBE(Array.from(n.slice(12,20)))]}function y(e){const r=new Uint8Array(20),n=o(r),[i,s,u]=e;return n.setUint32(0,l(i)),n.setUint32(8,l(s)),n.setUint32(16,l(u)),t(r)}function p(r,t){let n=c.exec(t);if(null===n){return{status:0}}let o=[e.fromString(n[1]),e.fromString(n[2]),e.fromString(n[3])],l=`${o[0].toString()}.${o[1].toString()}.${o[2].toString()}`,i=E(r,l);return{status:void 0===n[4]?2:i==n[4]?3:1,num1:o[0],num2:o[1],num3:o[2],givenChecksum:n[4],correctChecksum:i,noChecksumFormat:l,withChecksumFormat:`${l}-${i}`}}function E(e,r){let t="",n=[],o=0,l=0,i=0,s=0,u=0;const a=11881376,c="a".charCodeAt(0);let m=new Uint8Array(e.length+6);m.set(e,0),m.set([0,0,0,0,0,0],e.length);for(let e=0;e<r.length;e++)n.push("."===r[e]?10:parseInt(r[e],10));for(let e=0;e<n.length;e++)i=(31*i+n[e])%17576,e%2==0?o=(o+n[e])%11:l=(l+n[e])%11;for(let e=0;e<m.length;e++)s=(31*s+m[e])%a;u=(17576*(11*(r.length%5*11+o)+l)+i+s)%a,u=1000003*u%a;for(let e=0;e<5;e++)t=String.fromCharCode(c+u%26)+t,u/=26;return t}function S(e,r,t,o,l){if(null==l._network._ledgerId||null==o)return;const i=E(l._network._ledgerId._ledgerId,`${e.toString()}.${r.toString()}.${t.toString()}`);if(o!=i)throw new n(e,r,t,o,i)}function k(e,r){if(null==r)throw new Error("client cannot be null");if(null==r._network._ledgerId)throw new Error("cannot calculate checksum with a client that does not contain a recognzied ledger ID");return`${e}-${E(r._network._ledgerId._ledgerId,e)}`}function x(e){const r=i.decode(e);if(!r)return null;let t;try{t=s.proto.Key.decode(r)}catch(e){throw new Error("The alias is created with hollow account. Please use aliasToEvmAddress!")}return null!=t.ed25519&&t.ed25519.byteLength>0?u.fromBytes(t.ed25519):null!=t.ECDSASecp256k1&&t.ECDSASecp256k1.byteLength>0?u.fromBytes(t.ECDSASecp256k1):null}function $(e){const r=i.decode(e);if(!r)return null;try{throw s.proto.Key.decode(r),new Error("The alias is created with ed25519 or ECDSASecp256k1 account. Please use aliasToPublicKey!")}catch(e){return function(e){var r="0x";return e.forEach((function(e){r+=("0"+(255&e).toString(16)).slice(-2)})),r}(r)}}function b(e){if("string"==typeof e&&(e.startsWith("0x")&&42==e.length||40==e.length)){e.startsWith("0x")||(e=`0x${e}`);const r=a(e);return r?i.encode(r):null}const r="string"==typeof e?u.fromString(e):e;let t=r.toStringRaw(),n="";"secp256k1"===r._key._type&&(n="0x3A21"),"ED25519"===r._key._type&&(n="0x1220"),t.startsWith("0x")||(t=`0x${t}`);const o=a(n),l=a(t),s=(c=o,m=l,(f=new Uint8Array(c.byteLength+m.byteLength)).set(new Uint8Array(c),0),f.set(new Uint8Array(m),c.byteLength),f);var c,m,f;return i.encode(s)}export{E as _checksum,p as _parseAddress,$ as aliasToEvmAddress,x as aliasToPublicKey,h as compare,f as constructor,w as fromSolidityAddress,g as fromString,d as fromStringSplitter,b as publicKeyToAlias,y as toSolidityAddress,k as toStringWithChecksum,S as validateChecksum};
//# sourceMappingURL=EntityIdHelper.js.map
