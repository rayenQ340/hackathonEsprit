import e from"../transaction/Transaction.js";import t from"./AccountId.js";import n from"../contract/ContractId.js";import r from"../token/TokenId.js";import o from"../token/NftId.js";import s from"long";import l from"../Hbar.js";import a from"./HbarAllowance.js";import i from"./TokenAllowance.js";import c from"./TokenNftAllowance.js";import{requireNotNegative as d}from"../util.js";class u extends e{constructor(e={}){super(),this._hbarAllowances=null!=e.hbarAllowances?e.hbarAllowances:[],this._tokenAllowances=null!=e.tokenAllowances?e.tokenAllowances:[],this._nftAllowances=null!=e.nftAllowances?e.nftAllowances:[]}get hbarAllowances(){return this._hbarAllowances}addHbarAllowance(e,t){const n=t instanceof l?t:new l(t);return this._adjustHbarAllowance(null,e,d(n))}_adjustHbarAllowance(e,r,o){return this._requireNotFrozen(),this._hbarAllowances.push(new a({spenderAccountId:"string"==typeof r?t.fromString(r):r instanceof n?t.fromEvmAddress(r.shard,r.realm,r.toSolidityAddress()):r,ownerAccountId:"string"==typeof e?t.fromString(e):e instanceof n?t.fromEvmAddress(e.shard,e.realm,e.toSolidityAddress()):e,amount:o})),this}grantHbarAllowance(e,t,n){const r=n instanceof l?n:new l(n);return this._adjustHbarAllowance(e,t,d(r))}revokeHbarAllowance(e,t,n){const r=n instanceof l?n:new l(n);return this._adjustHbarAllowance(e,t,d(r).negated())}get tokenAllowances(){return this._tokenAllowances}addTokenAllowance(e,t,n){return this._adjustTokenAllowance(e,null,t,d(s.fromValue(n)))}_adjustTokenAllowance(e,o,l,a){return this._requireNotFrozen(),this._tokenAllowances.push(new i({tokenId:"string"==typeof e?r.fromString(e):e,spenderAccountId:"string"==typeof l?t.fromString(l):l instanceof n?t.fromEvmAddress(l.shard,l.realm,l.toSolidityAddress()):l,ownerAccountId:"string"==typeof o?t.fromString(o):o instanceof n?t.fromEvmAddress(o.shard,o.realm,o.toSolidityAddress()):o,amount:"number"==typeof a?s.fromNumber(a):a})),this}grantTokenAllowance(e,t,n,r){return this._adjustTokenAllowance(e,t,n,d(s.fromValue(r)))}revokeTokenAllowance(e,t,n,r){return this._adjustTokenAllowance(e,t,n,d(s.fromValue(r)))}addTokenNftAllowance(e,t){const n="string"==typeof e?o.fromString(e):e;return this._adjustTokenNftAllowance(n,null,t)}_adjustTokenNftAllowance(e,r,o){this._requireNotFrozen();const s="string"==typeof o?t.fromString(o):o instanceof n?t.fromEvmAddress(o.shard,o.realm,o.toSolidityAddress()):o,l="string"==typeof r?t.fromString(r):r instanceof n?t.fromEvmAddress(r.shard,r.realm,r.toSolidityAddress()):r;let a=!1;for(const t of this._nftAllowances)if(0===t.tokenId.compare(e.tokenId)&&null!=t.spenderAccountId&&0===t.spenderAccountId.compare(s)){null!=t.serialNumbers&&t.serialNumbers.push(e.serial),a=!0;break}return a||this._nftAllowances.push(new c({tokenId:e.tokenId,spenderAccountId:s,serialNumbers:[e.serial],ownerAccountId:l,allSerials:!1,delegatingSpender:null})),this}grantTokenNftAllowance(e,t,n){const r="string"==typeof e?o.fromString(e):e;return d(r.serial),this._adjustTokenNftAllowance(r,t,n)}revokeTokenNftAllowance(e,t,n){const r="string"==typeof e?o.fromString(e):e;return d(r.serial),this._adjustTokenNftAllowance(new o(r.tokenId,r.serial.negate()),t,n)}addAllTokenNftAllowance(e,t){return this._adjustTokenNftAllowanceAllSerials(e,null,t,!0)}grantTokenNftAllowanceAllSerials(e,t,n){return this._adjustTokenNftAllowanceAllSerials(e,t,n,!0)}revokeTokenNftAllowanceAllSerials(e,t,n){return this._adjustTokenNftAllowanceAllSerials(e,t,n,!1)}_adjustTokenNftAllowanceAllSerials(e,o,s,l){return this._requireNotFrozen(),this._nftAllowances.push(new c({tokenId:"string"==typeof e?r.fromString(e):e,ownerAccountId:null!=o?"string"==typeof o?t.fromString(o):o instanceof n?t.fromEvmAddress(o.shard,o.realm,o.toSolidityAddress()):o:null,spenderAccountId:"string"==typeof s?t.fromString(s):s instanceof n?t.fromEvmAddress(s.shard,s.realm,s.toSolidityAddress()):s,serialNumbers:null,allSerials:l,delegatingSpender:null})),this}_validateChecksums(e){this._hbarAllowances.map((t=>t._validateChecksums(e))),this._tokenAllowances.map((t=>t._validateChecksums(e))),this._nftAllowances.map((t=>t._validateChecksums(e)))}_execute(e,t){return Promise.reject(new Error("This feature has been deprecated for this class."))}_getTransactionDataCase(){throw new Error("This feature has been deprecated for this class.")}_makeTransactionData(){throw new Error("This feature has been deprecated.")}_getLogId(){return`AccountAllowanceAdjustTransaction:${this._transactionIds.current.validStart.toString()}`}}export{u as default};
//# sourceMappingURL=AccountAllowanceAdjustTransaction.js.map
