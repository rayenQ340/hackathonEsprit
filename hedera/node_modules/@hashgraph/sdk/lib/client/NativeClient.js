import e from"./Client.js";import t from"../channel/NativeChannel.js";import"../account/AccountId.js";import r from"../LedgerId.js";import{NATIVE_PREVIEWNET as n,NATIVE_TESTNET as s,MAINNET as o}from"../constants/ClientConstants.js";const w={MAINNET:o,TESTNET:s,PREVIEWNET:n};class i extends e{constructor(e){if(super(e),null!=e)if("string"==typeof e.network)switch(e.network){case"mainnet":this.setNetwork(w.MAINNET),this.setLedgerId(r.MAINNET);break;case"testnet":this.setNetwork(w.TESTNET),this.setLedgerId(r.TESTNET);break;case"previewnet":this.setNetwork(w.PREVIEWNET),this.setLedgerId(r.PREVIEWNET);break;default:throw new Error(`unknown network: ${e.network}`)}else null!=e.network&&this.setNetwork(e.network)}static fromConfig(e){return new i("string"==typeof e?JSON.parse(e):e)}static forNetwork(e){return new i({network:e,scheduleNetworkUpdate:!1})}static forName(e){return new i({network:e,scheduleNetworkUpdate:!1})}static forMainnet(){return new i({network:"mainnet",scheduleNetworkUpdate:!1})}static forTestnet(){return new i({network:"testnet",scheduleNetworkUpdate:!1})}static forPreviewnet(){return new i({network:"previewnet",scheduleNetworkUpdate:!1})}setNetwork(e){if("string"==typeof e)switch(e){case"previewnet":this._network.setNetwork(w.PREVIEWNET);break;case"testnet":this._network.setNetwork(w.TESTNET);break;case"mainnet":this._network.setNetwork(w.MAINNET)}else this._network.setNetwork(e)}setMirrorNetwork(e){}_createNetworkChannel(){return e=>new t(e)}_createMirrorNetworkChannel(){return e=>null}}export{w as Network,i as default};
//# sourceMappingURL=NativeClient.js.map
