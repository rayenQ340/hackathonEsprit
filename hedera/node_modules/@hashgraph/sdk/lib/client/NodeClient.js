import e from"fs";import r from"util";import t from"./Client.js";import o from"../channel/NodeChannel.js";import s from"../channel/NodeMirrorChannel.js";import i from"../LedgerId.js";import n from"../account/AccountId.js";import a from"../address_book/NodeAddressBook.js";import{addressBook as w}from"./addressbooks/mainnet.js";import{addressBook as k}from"./addressbooks/testnet.js";import{addressBook as N}from"./addressbooks/previewnet.js";import{decode as m}from"../encoding/hex.js";import d from"../network/AddressBookQuery.js";import c from"../file/FileId.js";const h=r.promisify(e.readFile),f={LOCAL_NODE:{"127.0.0.1:50211":new n(3)}},E={MAINNET:["mainnet-public.mirrornode.hedera.com:443"],TESTNET:["testnet.mirrornode.hedera.com:443"],PREVIEWNET:["previewnet.mirrornode.hedera.com:443"],LOCAL_NODE:["127.0.0.1:5600"]};class u extends t{constructor(e){if(super(e),this._maxExecutionTime=1e4,null!=e)if("string"==typeof e.network?this._setNetworkFromName(e.network):null!=e.network&&this.setNetwork(e.network),"string"==typeof e.mirrorNetwork)switch(e.mirrorNetwork){case"mainnet":this.setMirrorNetwork(E.MAINNET);break;case"testnet":this.setMirrorNetwork(E.TESTNET);break;case"previewnet":this.setMirrorNetwork(E.PREVIEWNET);break;default:this.setMirrorNetwork([e.mirrorNetwork])}else null!=e.mirrorNetwork&&this.setMirrorNetwork(e.mirrorNetwork)}static fromConfig(e){return new u("string"==typeof e?JSON.parse(e):e)}static async fromConfigFile(e){return u.fromConfig(await h(e,"utf8"))}static forNetwork(e,r){return new u({network:e,...r})}static forName(e,r={}){return new u({network:e,...r})}static forMainnet(e={}){return new u({network:"mainnet",...e})}static forTestnet(e={}){return new u({network:"testnet",...e})}static async forMirrorNetwork(e){const r=new u;r.setMirrorNetwork(e).setNetworkUpdatePeriod(1e4);const t=await(new d).setFileId(c.ADDRESS_BOOK).execute(r);return r.setNetworkFromAddressBook(t),r}static forPreviewnet(e={}){return new u({network:"previewnet",...e})}static forLocalNode(e={scheduleNetworkUpdate:!1}){return new u({network:"local-node",...e})}setNetwork(e){"string"==typeof e?this._setNetworkFromName(e):this._network.setNetwork(e)}setMaxExecutionTime(e){return this._maxExecutionTime=e,this}_setNetworkFromName(e){switch(e){case"mainnet":this.setNetworkFromAddressBook(a.fromBytes(m(w))),this.setMirrorNetwork(E.MAINNET),this.setLedgerId(i.MAINNET);break;case"testnet":this.setNetworkFromAddressBook(a.fromBytes(m(k))),this.setMirrorNetwork(E.TESTNET),this.setLedgerId(i.TESTNET);break;case"previewnet":this.setNetworkFromAddressBook(a.fromBytes(m(N))),this.setMirrorNetwork(E.PREVIEWNET),this.setLedgerId(i.PREVIEWNET);break;case"local-node":this.setNetwork(f.LOCAL_NODE),this.setMirrorNetwork(E.LOCAL_NODE),this.setLedgerId(i.LOCAL_NODE);break;default:throw new Error(`unknown network: ${e}`)}return this}setMirrorNetwork(e){if("string"==typeof e)switch(e){case"local-node":this._mirrorNetwork.setNetwork(E.LOCAL_NODE);break;case"previewnet":this._mirrorNetwork.setNetwork(E.PREVIEWNET);break;case"testnet":this._mirrorNetwork.setNetwork(E.TESTNET);break;case"mainnet":this._mirrorNetwork.setNetwork(E.MAINNET);break;default:this._mirrorNetwork.setNetwork([e])}else this._mirrorNetwork.setNetwork(e);return this}_createNetworkChannel(){return e=>new o(e,this._maxExecutionTime)}_createMirrorNetworkChannel(){return e=>new s(e)}}export{E as MirrorNetwork,f as Network,u as default};
//# sourceMappingURL=NodeClient.js.map
