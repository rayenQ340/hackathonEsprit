{"version":3,"file":"WebClient.js","sources":["../../src/client/WebClient.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Client from \"./Client.js\";\nimport WebChannel from \"../channel/WebChannel.js\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport AccountId from \"../account/AccountId.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport {\n    MAINNET,\n    WEB_TESTNET,\n    WEB_PREVIEWNET,\n} from \"../constants/ClientConstants.js\";\n\n/**\n * @typedef {import(\"./Client.js\").ClientConfiguration} ClientConfiguration\n */\n\nexport const Network = {\n    /**\n     * @param {string} name\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    fromName(name) {\n        switch (name) {\n            case \"mainnet\":\n                return Network.MAINNET;\n\n            case \"testnet\":\n                return Network.TESTNET;\n\n            case \"previewnet\":\n                return Network.PREVIEWNET;\n\n            default:\n                throw new Error(`unknown network name: ${name}`);\n        }\n    },\n\n    MAINNET: MAINNET,\n    TESTNET: WEB_TESTNET,\n    PREVIEWNET: WEB_PREVIEWNET,\n};\n\n/**\n * Represents a client for interacting with the Hedera network over the web.\n * The `WebClient` class extends the base `Client` class and provides methods\n * for configuring and managing connections to the Hedera network, including\n * setting the network type (mainnet, testnet, previewnet) and handling\n * transactions and queries.\n * @augments {Client<WebChannel, *>}\n */\nexport default class WebClient extends Client {\n    /**\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        super(props);\n        if (props != null) {\n            if (typeof props.network === \"string\") {\n                switch (props.network) {\n                    case \"mainnet\":\n                        this.setNetwork(Network.MAINNET);\n                        this.setLedgerId(LedgerId.MAINNET);\n                        break;\n\n                    case \"testnet\":\n                        this.setNetwork(Network.TESTNET);\n                        this.setLedgerId(LedgerId.TESTNET);\n                        break;\n\n                    case \"previewnet\":\n                        this.setNetwork(Network.PREVIEWNET);\n                        this.setLedgerId(LedgerId.PREVIEWNET);\n                        break;\n\n                    default:\n                        throw new Error(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            `unknown network: ${props.network}`,\n                        );\n                }\n            } else if (props.network != null) {\n                this.setNetwork(props.network);\n            }\n        }\n    }\n\n    /**\n     * @param {string | ClientConfiguration} data\n     * @returns {WebClient}\n     */\n    static fromConfig(data) {\n        return new WebClient(\n            typeof data === \"string\"\n                ? /** @type {ClientConfiguration | undefined} */ (\n                      JSON.parse(data)\n                  )\n                : data,\n        );\n    }\n\n    /**\n     * Construct a client for a specific network.\n     *\n     * It is the responsibility of the caller to ensure that all nodes in the map are part of the\n     * same Hedera network. Failure to do so will result in undefined behavior.\n     *\n     * The client will load balance all requests to Hedera using a simple round-robin scheme to\n     * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be\n     * tried.\n     *\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {WebClient}\n     */\n    static forNetwork(network) {\n        return new WebClient({ network, scheduleNetworkUpdate: false });\n    }\n\n    /**\n     * @param {string} network\n     * @returns {WebClient}\n     */\n    static forName(network) {\n        return new WebClient({ network, scheduleNetworkUpdate: false });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Mainnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forMainnet() {\n        return new WebClient({\n            network: \"mainnet\",\n            scheduleNetworkUpdate: false,\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Testnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forTestnet() {\n        return new WebClient({\n            network: \"testnet\",\n            scheduleNetworkUpdate: false,\n        });\n    }\n\n    /**\n     * Construct a Hedera client pre-configured for Previewnet access.\n     *\n     * @returns {WebClient}\n     */\n    static forPreviewnet() {\n        return new WebClient({\n            network: \"previewnet\",\n            scheduleNetworkUpdate: false,\n        });\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    setNetwork(network) {\n        if (typeof network === \"string\") {\n            switch (network) {\n                case \"previewnet\":\n                    this._network.setNetwork(Network.PREVIEWNET);\n                    break;\n                case \"testnet\":\n                    this._network.setNetwork(Network.TESTNET);\n                    break;\n                case \"mainnet\":\n                    this._network.setNetwork(Network.MAINNET);\n            }\n        } else {\n            this._network.setNetwork(network);\n        }\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {this}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMirrorNetwork(mirrorNetwork) {\n        if (typeof mirrorNetwork === \"string\") {\n            this._mirrorNetwork.setNetwork([]);\n        } else {\n            this._mirrorNetwork.setNetwork(mirrorNetwork);\n        }\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => WebChannel}\n     */\n    _createNetworkChannel() {\n        return (address) => new WebChannel(address);\n    }\n\n    /**\n     * @override\n     * @returns {(address: string) => *}\n     */\n    _createMirrorNetworkChannel() {\n        return () => {\n            throw new Error(\"mirror support is not supported in browsers\");\n        };\n    }\n\n    /**\n     * @override\n     * @returns {Promise<void>}\n     */\n    updateNetwork() {\n        return Promise.reject(\n            new Error(\"Update network is not supported in browsers\"),\n        );\n    }\n}\n"],"names":["Network","MAINNET","TESTNET","WEB_TESTNET","PREVIEWNET","WEB_PREVIEWNET","WebClient","Client","constructor","props","super","network","this","setNetwork","setLedgerId","LedgerId","Error","fromConfig","data","JSON","parse","forNetwork","scheduleNetworkUpdate","forName","forMainnet","forTestnet","forPreviewnet","_network","setMirrorNetwork","mirrorNetwork","_mirrorNetwork","_createNetworkChannel","address","WebChannel","_createMirrorNetworkChannel","updateNetwork","Promise","reject"],"mappings":"gOAiBY,MAACA,EAAU,CAqBnBC,QAASA,EACTC,QAASC,EACTC,WAAYC,GAWD,MAAMC,UAAkBC,EAInC,WAAAC,CAAYC,GAER,GADAC,MAAMD,GACO,MAATA,EACA,GAA6B,iBAAlBA,EAAME,QACb,OAAQF,EAAME,SACV,IAAK,UACDC,KAAKC,WAAWb,EAAQC,SACxBW,KAAKE,YAAYC,EAASd,SAC1B,MAEJ,IAAK,UACDW,KAAKC,WAAWb,EAAQE,SACxBU,KAAKE,YAAYC,EAASb,SAC1B,MAEJ,IAAK,aACDU,KAAKC,WAAWb,EAAQI,YACxBQ,KAAKE,YAAYC,EAASX,YAC1B,MAEJ,QACI,MAAM,IAAIY,MAEN,oBAAoBP,EAAME,gBAGd,MAAjBF,EAAME,SACbC,KAAKC,WAAWJ,EAAME,QAGtC,CAMI,iBAAOM,CAAWC,GACd,OAAO,IAAIZ,EACS,iBAATY,EAEGC,KAAKC,MAAMF,GAEfA,EAElB,CAeI,iBAAOG,CAAWV,GACd,OAAO,IAAIL,EAAU,CAAEK,UAASW,uBAAuB,GAC/D,CAMI,cAAOC,CAAQZ,GACX,OAAO,IAAIL,EAAU,CAAEK,UAASW,uBAAuB,GAC/D,CAOI,iBAAOE,GACH,OAAO,IAAIlB,EAAU,CACjBK,QAAS,UACTW,uBAAuB,GAEnC,CAOI,iBAAOG,GACH,OAAO,IAAInB,EAAU,CACjBK,QAAS,UACTW,uBAAuB,GAEnC,CAOI,oBAAOI,GACH,OAAO,IAAIpB,EAAU,CACjBK,QAAS,aACTW,uBAAuB,GAEnC,CAMI,UAAAT,CAAWF,GACP,GAAuB,iBAAZA,EACP,OAAQA,GACJ,IAAK,aACDC,KAAKe,SAASd,WAAWb,EAAQI,YACjC,MACJ,IAAK,UACDQ,KAAKe,SAASd,WAAWb,EAAQE,SACjC,MACJ,IAAK,UACDU,KAAKe,SAASd,WAAWb,EAAQC,cAGzCW,KAAKe,SAASd,WAAWF,EAErC,CAOI,gBAAAiB,CAAiBC,GAOb,MAN6B,iBAAlBA,EACPjB,KAAKkB,eAAejB,WAAW,IAE/BD,KAAKkB,eAAejB,WAAWgB,GAG5BjB,IACf,CAMI,qBAAAmB,GACI,OAAQC,GAAY,IAAIC,EAAWD,EAC3C,CAMI,2BAAAE,GACI,MAAO,KACH,MAAM,IAAIlB,MAAM,8CAA8C,CAE1E,CAMI,aAAAmB,GACI,OAAOC,QAAQC,OACX,IAAIrB,MAAM,+CAEtB"}