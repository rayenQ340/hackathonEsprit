{"version":3,"file":"Client.js","sources":["../../src/client/Client.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport AccountId from \"../account/AccountId.js\";\nimport AccountBalanceQuery from \"../account/AccountBalanceQuery.js\";\nimport Hbar from \"../Hbar.js\";\nimport Network from \"./Network.js\";\nimport MirrorNetwork from \"./MirrorNetwork.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport PrivateKey from \"../PrivateKey.js\";\nimport LedgerId from \"../LedgerId.js\";\nimport FileId from \"../file/FileId.js\";\nimport CACHE from \"../Cache.js\";\nimport Logger from \"../logger/Logger.js\"; // eslint-disable-line\nimport { convertToNumber } from \"../util.js\";\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../channel/MirrorChannel.js\").default} MirrorChannel\n * @typedef {import(\"../address_book/NodeAddressBook.js\").default} NodeAddressBook\n */\n\n/**\n * @typedef {object} Operator\n * @property {string | PrivateKey} privateKey\n * @property {string | AccountId} accountId\n */\n\n/**\n * @typedef {object} ClientOperator\n * @property {PublicKey} publicKey\n * @property {AccountId} accountId\n * @property {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n */\n\n/**\n * @typedef {object} ClientConfiguration\n * @property {{[key: string]: (string | AccountId)} | string} network\n * @property {string[] | string} [mirrorNetwork]\n * @property {Operator} [operator]\n * @property {boolean} [scheduleNetworkUpdate]\n */\n\n/**\n * @typedef {\"mainnet\" | \"testnet\" | \"previewnet\"} NetworkName\n */\n\n/**\n * The `Client` class is the main entry point for interacting with the Hedera Hashgraph network.\n * It provides methods for managing network connections, setting operators, handling transactions\n * and queries, and configuring various client settings.\n *\n * @abstract\n * @template {Channel} ChannelT\n * @template {MirrorChannel} MirrorChannelT\n */\nexport default class Client {\n    /**\n     * @protected\n     * @hideconstructor\n     * @param {ClientConfiguration} [props]\n     */\n    constructor(props) {\n        /**\n         * List of mirror network URLs.\n         *\n         * @internal\n         * @type {MirrorNetwork}\n         */\n        this._mirrorNetwork = new MirrorNetwork(\n            this._createMirrorNetworkChannel(),\n        );\n\n        /**\n         * Map of node account ID (as a string)\n         * to the node URL.\n         *\n         * @internal\n         * @type {Network}\n         */\n        this._network = new Network(this._createNetworkChannel());\n\n        /**\n         * @internal\n         * @type {?ClientOperator}\n         */\n        this._operator = null;\n\n        /**\n         * @private\n         * @type {?Hbar}\n         */\n        this._defaultMaxTransactionFee = null;\n\n        /**\n         * @private\n         * @type {Hbar}\n         */\n        this._defaultMaxQueryPayment = new Hbar(1);\n\n        if (props != null) {\n            if (props.operator != null) {\n                this.setOperator(\n                    props.operator.accountId,\n                    props.operator.privateKey,\n                );\n            }\n        }\n\n        /** @type {number | null} */\n        this._maxAttempts = null;\n\n        /** @private */\n        this._signOnDemand = false;\n\n        /** @private */\n        this._autoValidateChecksums = false;\n\n        /** @private */\n        this._minBackoff = 250;\n\n        /** @private */\n        this._maxBackoff = 8000;\n\n        /** @private */\n        this._defaultRegenerateTransactionId = true;\n\n        /** @private */\n        this._requestTimeout = null;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._isUpdatingNetwork = false;\n\n        /** @private */\n        this._networkUpdatePeriod = 24 * 60 * 60 * 1000;\n\n        /** @private */\n        this._isShutdown = false;\n\n        if (props != null && props.scheduleNetworkUpdate !== false) {\n            this._scheduleNetworkUpdate();\n        }\n\n        /** @internal */\n        /** @type {NodeJS.Timeout} */\n        this._timer;\n\n        /**\n         * Logger\n         *\n         * @external\n         * @type {Logger | null}\n         */\n        this._logger = null;\n    }\n\n    /**\n     * @deprecated\n     * @param {NetworkName} networkName\n     * @returns {this}\n     */\n    setNetworkName(networkName) {\n        // uses custom NetworkName type\n        // remove if phasing out set|get NetworkName\n        console.warn(\"Deprecated: Use `setLedgerId` instead\");\n        return this.setLedgerId(networkName);\n    }\n\n    /**\n     * @deprecated\n     * @returns {string | null}\n     */\n    get networkName() {\n        console.warn(\"Deprecated: Use `ledgerId` instead\");\n        return this.ledgerId != null ? this.ledgerId.toString() : null;\n    }\n\n    /**\n     * @param {string|LedgerId} ledgerId\n     * @returns {this}\n     */\n    setLedgerId(ledgerId) {\n        this._network.setLedgerId(\n            typeof ledgerId === \"string\"\n                ? LedgerId.fromString(ledgerId)\n                : ledgerId,\n        );\n\n        return this;\n    }\n\n    /**\n     * @returns {LedgerId | null}\n     */\n    get ledgerId() {\n        return this._network._ledgerId != null ? this._network.ledgerId : null;\n    }\n\n    /**\n     * @param {{[key: string]: (string | AccountId)} | string} network\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNetwork(network) {\n        // TODO: This logic _can_ be de-duplicated and likely should\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @param {NodeAddressBook} addressBook\n     * @returns {this}\n     */\n    setNetworkFromAddressBook(addressBook) {\n        this._network.setNetworkFromAddressBook(addressBook);\n        return this;\n    }\n\n    /**\n     * @returns {{[key: string]: (string | AccountId)}}\n     */\n    get network() {\n        return this._network.network;\n    }\n\n    /**\n     * @param {string[] | string} mirrorNetwork\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setMirrorNetwork(mirrorNetwork) {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @returns {string[]}\n     */\n    get mirrorNetwork() {\n        return this._mirrorNetwork.network;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get signOnDemand() {\n        return this._signOnDemand;\n    }\n\n    /**\n     * @param {boolean} signOnDemand\n     */\n    setSignOnDemand(signOnDemand) {\n        this._signOnDemand = signOnDemand;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isTransportSecurity() {\n        return this._network.isTransportSecurity();\n    }\n\n    /**\n     * @param {boolean} transportSecurity\n     * @returns {this}\n     */\n    setTransportSecurity(transportSecurity) {\n        this._network.setTransportSecurity(transportSecurity);\n        return this;\n    }\n\n    /**\n     * Set the account that will, by default, pay for transactions and queries built with this client.\n     * NOTE: When using string for private key, the string needs to contain DER headers\n     *\n     * @param {AccountId | string} accountId\n     * @param {PrivateKey | string} privateKey\n     * @returns {this}\n     */\n    setOperator(accountId, privateKey) {\n        const key =\n            typeof privateKey === \"string\"\n                ? PrivateKey.fromStringDer(privateKey)\n                : privateKey;\n\n        return this.setOperatorWith(accountId, key.publicKey, (message) =>\n            Promise.resolve(key.sign(message)),\n        );\n    }\n\n    /**\n     * @returns {?ClientOperator}\n     */\n    getOperator() {\n        return this._operator;\n    }\n\n    /**\n     * Sets the account that will, by default, pay for transactions and queries built with\n     * this client.\n     *\n     * @param {AccountId | string} accountId\n     * @param {PublicKey | string} publicKey\n     * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner\n     * @returns {this}\n     */\n    setOperatorWith(accountId, publicKey, transactionSigner) {\n        const accountId_ =\n            accountId instanceof AccountId\n                ? accountId\n                : AccountId.fromString(accountId);\n\n        if (this._network._ledgerId != null) {\n            accountId_.validateChecksum(this);\n        }\n\n        this._operator = {\n            transactionSigner,\n\n            accountId: accountId_,\n\n            publicKey:\n                publicKey instanceof PublicKey\n                    ? publicKey\n                    : PublicKey.fromString(publicKey),\n        };\n\n        return this;\n    }\n\n    /**\n     * @param {boolean} value\n     * @returns {this}\n     */\n    setAutoValidateChecksums(value) {\n        this._autoValidateChecksums = value;\n        return this;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isAutoValidateChecksumsEnabled() {\n        return this._autoValidateChecksums;\n    }\n\n    /**\n     * @returns {?AccountId}\n     */\n    get operatorAccountId() {\n        return this._operator != null ? this._operator.accountId : null;\n    }\n\n    /**\n     * @returns {?PublicKey}\n     */\n    get operatorPublicKey() {\n        return this._operator != null ? this._operator.publicKey : null;\n    }\n\n    /**\n     * @returns {?Hbar}\n     */\n    get defaultMaxTransactionFee() {\n        return this._defaultMaxTransactionFee;\n    }\n\n    /**\n     * @deprecated - Use `defaultMaxTransactionFee` instead\n     * @returns {?Hbar}\n     */\n    get maxTransactionFee() {\n        return this.defaultMaxTransactionFee;\n    }\n\n    /**\n     * Set the defaultimum fee to be paid for transactions\n     * executed by this client.\n     *\n     * @param {Hbar} defaultMaxTransactionFee\n     * @returns {this}\n     */\n    setDefaultMaxTransactionFee(defaultMaxTransactionFee) {\n        if (defaultMaxTransactionFee.toTinybars().toInt() < 0) {\n            throw new Error(\"defaultMaxTransactionFee must be non-negative\");\n        }\n        this._defaultMaxTransactionFee = defaultMaxTransactionFee;\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `setDefaultMaxTransactionFee()` instead\n     * Set the maximum fee to be paid for transactions\n     * executed by this client.\n     * @param {Hbar} maxTransactionFee\n     * @returns {this}\n     */\n    setMaxTransactionFee(maxTransactionFee) {\n        return this.setDefaultMaxTransactionFee(maxTransactionFee);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get defaultRegenerateTransactionId() {\n        return this._defaultRegenerateTransactionId;\n    }\n\n    /**\n     * Set if a new transaction ID should be generated when a `TRANSACTION_EXPIRED` status\n     * is returned.\n     *\n     * @param {boolean} defaultRegenerateTransactionId\n     * @returns {this}\n     */\n    setDefaultRegenerateTransactionId(defaultRegenerateTransactionId) {\n        this._defaultRegenerateTransactionId = defaultRegenerateTransactionId;\n        return this;\n    }\n\n    /**\n     * @returns {Hbar}\n     */\n    get defaultMaxQueryPayment() {\n        return this._defaultMaxQueryPayment;\n    }\n\n    /**\n     * @deprecated in a favor of defaultMaxQueryPayment\n     * @returns {Hbar}\n     */\n    get maxQueryPayment() {\n        return this.defaultMaxQueryPayment;\n    }\n\n    /**\n     * Set the maximum payment allowable for queries.\n     *\n     * @param {Hbar} defaultMaxQueryPayment\n     * @returns {Client<ChannelT, MirrorChannelT>}\n     */\n    setDefaultMaxQueryPayment(defaultMaxQueryPayment) {\n        const isMaxQueryPaymentNegative =\n            convertToNumber(defaultMaxQueryPayment.toTinybars()) < 0;\n        if (isMaxQueryPaymentNegative) {\n            throw new Error(\"defaultMaxQueryPayment must be non-negative\");\n        }\n        this._defaultMaxQueryPayment = defaultMaxQueryPayment;\n        return this;\n    }\n    /**\n     * @deprecated in a favor of setDefaultMaxQueryPayment()\n     * Set the maximum payment allowable for queries.\n     * @param {Hbar} maxQueryPayment\n     * @returns {Client<ChannelT, MirrorChannelT>}\n     */\n    setMaxQueryPayment(maxQueryPayment) {\n        return this.setDefaultMaxQueryPayment(maxQueryPayment);\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxAttempts() {\n        return this._maxAttempts != null ? this._maxAttempts : 10;\n    }\n\n    /**\n     * @param {number} maxAttempts\n     * @returns {this}\n     */\n    setMaxAttempts(maxAttempts) {\n        this._maxAttempts = maxAttempts;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxNodeAttempts() {\n        return this._network.maxNodeAttempts;\n    }\n\n    /**\n     * @param {number} maxNodeAttempts\n     * @returns {this}\n     */\n    setMaxNodeAttempts(maxNodeAttempts) {\n        this._network.setMaxNodeAttempts(maxNodeAttempts);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeWaitTime() {\n        return this._network.minBackoff;\n    }\n\n    /**\n     * @param {number} nodeWaitTime\n     * @returns {this}\n     */\n    setNodeWaitTime(nodeWaitTime) {\n        this._network.setMinBackoff(nodeWaitTime);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxNodesPerTransaction() {\n        return this._network.maxNodesPerTransaction;\n    }\n\n    /**\n     * @param {number} maxNodesPerTransaction\n     * @returns {this}\n     */\n    setMaxNodesPerTransaction(maxNodesPerTransaction) {\n        this._network.setMaxNodesPerTransaction(maxNodesPerTransaction);\n        return this;\n    }\n\n    /**\n     * @param {?number} minBackoff\n     * @returns {this}\n     */\n    setMinBackoff(minBackoff) {\n        if (minBackoff == null) {\n            throw new Error(\"minBackoff cannot be null.\");\n        }\n        if (minBackoff > this._maxBackoff) {\n            throw new Error(\"minBackoff cannot be larger than maxBackoff.\");\n        }\n        this._minBackoff = minBackoff;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get minBackoff() {\n        return this._minBackoff;\n    }\n\n    /**\n     * @param {?number} maxBackoff\n     * @returns {this}\n     */\n    setMaxBackoff(maxBackoff) {\n        if (maxBackoff == null) {\n            throw new Error(\"maxBackoff cannot be null.\");\n        } else if (maxBackoff < this._minBackoff) {\n            throw new Error(\"maxBackoff cannot be smaller than minBackoff.\");\n        }\n        this._maxBackoff = maxBackoff;\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get maxBackoff() {\n        return this._maxBackoff;\n    }\n\n    /**\n     * @param {number} nodeMinBackoff\n     * @returns {this}\n     */\n    setNodeMinBackoff(nodeMinBackoff) {\n        this._network.setMinBackoff(nodeMinBackoff);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeMinBackoff() {\n        return this._network.minBackoff;\n    }\n\n    /**\n     * @param {number} nodeMaxBackoff\n     * @returns {this}\n     */\n    setNodeMaxBackoff(nodeMaxBackoff) {\n        this._network.setMaxBackoff(nodeMaxBackoff);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeMaxBackoff() {\n        return this._network.maxBackoff;\n    }\n\n    /**\n     * @param {number} nodeMinReadmitPeriod\n     * @returns {this}\n     */\n    setNodeMinReadmitPeriod(nodeMinReadmitPeriod) {\n        this._network.setNodeMinReadmitPeriod(nodeMinReadmitPeriod);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeMinReadmitPeriod() {\n        return this._network.nodeMinReadmitPeriod;\n    }\n\n    /**\n     * @param {number} nodeMaxReadmitPeriod\n     * @returns {this}\n     */\n    setNodeMaxReadmitPeriod(nodeMaxReadmitPeriod) {\n        this._network.setNodeMaxReadmitPeriod(nodeMaxReadmitPeriod);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get nodeMaxReadmitPeriod() {\n        return this._network.nodeMaxReadmitPeriod;\n    }\n\n    /**\n     * @param {number} requestTimeout - Number of milliseconds\n     * @returns {this}\n     */\n    setRequestTimeout(requestTimeout) {\n        this._requestTimeout = requestTimeout;\n        return this;\n    }\n\n    /**\n     * @returns {?number}\n     */\n    get requestTimeout() {\n        return this._requestTimeout;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get networkUpdatePeriod() {\n        return this._networkUpdatePeriod;\n    }\n\n    /**\n     * @param {number} networkUpdatePeriod\n     * @returns {this}\n     */\n    setNetworkUpdatePeriod(networkUpdatePeriod) {\n        clearTimeout(this._timer);\n        this._networkUpdatePeriod = networkUpdatePeriod;\n        this._scheduleNetworkUpdate();\n        return this;\n    }\n    /**\n     * Set logger\n     *\n     * @param {Logger} logger\n     * @returns {this}\n     */\n    setLogger(logger) {\n        this._logger = logger;\n        return this;\n    }\n\n    /**\n     * Get logger if set\n     *\n     * @returns {?Logger}\n     */\n    get logger() {\n        return this._logger;\n    }\n\n    /**\n     * @param {AccountId | string} accountId\n     */\n    async ping(accountId) {\n        await new AccountBalanceQuery({ accountId })\n            .setNodeAccountIds([\n                accountId instanceof AccountId\n                    ? accountId\n                    : AccountId.fromString(accountId),\n            ])\n            .execute(this);\n    }\n\n    async pingAll() {\n        for (const nodeAccountId of Object.values(this._network.network)) {\n            await this.ping(nodeAccountId);\n        }\n    }\n\n    /**\n     * Update the network address book.\n     * @returns {Promise<void>}\n     */\n    async updateNetwork() {\n        if (this._isUpdatingNetwork) {\n            return;\n        }\n\n        this._isUpdatingNetwork = true;\n\n        try {\n            const addressBook = await CACHE.addressBookQueryConstructor()\n                .setFileId(FileId.ADDRESS_BOOK)\n                .execute(this);\n            this.setNetworkFromAddressBook(addressBook);\n        } catch (error) {\n            if (this._logger) {\n                this._logger.trace(\n                    `failed to update client address book: ${\n                        /** @type {Error} */ (error).toString()\n                    }`,\n                );\n            }\n        } finally {\n            this._isUpdatingNetwork = false;\n        }\n    }\n\n    /**\n     * @returns {void}\n     */\n    close() {\n        this._network.close();\n        this._mirrorNetwork.close();\n        this._isShutdown = true;\n        clearTimeout(this._timer);\n    }\n\n    /**\n     * @abstract\n     * @returns {(address: string) => ChannelT}\n     */\n    _createNetworkChannel() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @abstract\n     * @returns {(address: string) => MirrorChannelT}\n     */\n    _createMirrorNetworkChannel() {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * @private\n     */\n    _scheduleNetworkUpdate() {\n        // This is the automatic network update promise that _eventually_ completes\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises,@typescript-eslint/no-misused-promises\n        this._timer = setTimeout(async () => {\n            await this.updateNetwork();\n\n            if (!this._isShutdown) {\n                // Recall this method to continuously update the network\n                // every `networkUpdatePeriod` amount of itme\n                this._scheduleNetworkUpdate();\n            }\n        }, this._networkUpdatePeriod);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get isClientShutDown() {\n        return this._isShutdown;\n    }\n}\n"],"names":["Client","constructor","props","this","_mirrorNetwork","MirrorNetwork","_createMirrorNetworkChannel","_network","Network","_createNetworkChannel","_operator","_defaultMaxTransactionFee","_defaultMaxQueryPayment","Hbar","operator","setOperator","accountId","privateKey","_maxAttempts","_signOnDemand","_autoValidateChecksums","_minBackoff","_maxBackoff","_defaultRegenerateTransactionId","_requestTimeout","_isUpdatingNetwork","_networkUpdatePeriod","_isShutdown","scheduleNetworkUpdate","_scheduleNetworkUpdate","_timer","_logger","setNetworkName","networkName","console","warn","setLedgerId","ledgerId","toString","LedgerId","fromString","_ledgerId","setNetwork","network","Error","setNetworkFromAddressBook","addressBook","setMirrorNetwork","mirrorNetwork","signOnDemand","setSignOnDemand","isTransportSecurity","setTransportSecurity","transportSecurity","key","PrivateKey","fromStringDer","setOperatorWith","publicKey","message","Promise","resolve","sign","getOperator","transactionSigner","accountId_","AccountId","validateChecksum","PublicKey","setAutoValidateChecksums","value","isAutoValidateChecksumsEnabled","operatorAccountId","operatorPublicKey","defaultMaxTransactionFee","maxTransactionFee","setDefaultMaxTransactionFee","toTinybars","toInt","setMaxTransactionFee","defaultRegenerateTransactionId","setDefaultRegenerateTransactionId","defaultMaxQueryPayment","maxQueryPayment","setDefaultMaxQueryPayment","convertToNumber","setMaxQueryPayment","maxAttempts","setMaxAttempts","maxNodeAttempts","setMaxNodeAttempts","nodeWaitTime","minBackoff","setNodeWaitTime","setMinBackoff","maxNodesPerTransaction","setMaxNodesPerTransaction","setMaxBackoff","maxBackoff","setNodeMinBackoff","nodeMinBackoff","setNodeMaxBackoff","nodeMaxBackoff","setNodeMinReadmitPeriod","nodeMinReadmitPeriod","setNodeMaxReadmitPeriod","nodeMaxReadmitPeriod","setRequestTimeout","requestTimeout","networkUpdatePeriod","setNetworkUpdatePeriod","clearTimeout","setLogger","logger","ping","AccountBalanceQuery","setNodeAccountIds","execute","pingAll","nodeAccountId","Object","values","updateNetwork","CACHE","addressBookQueryConstructor","setFileId","FileId","ADDRESS_BOOK","error","trace","close","setTimeout","async","isClientShutDown"],"mappings":"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"}