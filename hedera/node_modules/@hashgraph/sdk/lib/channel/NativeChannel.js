import t,{encodeRequest as e,decodeUnaryResponse as a}from"./Channel.js";import{encode as r,decode as o}from"../encoding/base64.native.js";import s from"../http/HttpError.js";import n from"../http/HttpStatus.js";import{SDK_VERSION as i}from"../version.js";class p extends t{constructor(t){super(),this._address=t}close(){}_createUnaryClient(t){return async(p,c,l)=>{try{const d=r(new Uint8Array(e(c))),b=await fetch(`${this._address}/proto.${t}/${p.name}`,{method:"POST",headers:{"content-type":"application/grpc-web-text","x-user-agent":i,"x-accept-content-transfer-encoding":"base64","x-grpc-web":"1"},body:d});if(!b.ok){l(new s(n._fromValue(b.status)),null)}const f=await b.blob(),m=await new Promise(((t,e)=>{const a=new FileReader;a.readAsDataURL(f),a.onloadend=()=>{t(a.result)},a.onerror=e}));let u;if(m.startsWith("data:application/octet-stream;base64,"))u=o(m.split("data:application/octet-stream;base64,")[1]);else{if(!m.startsWith("data:application/grpc-web+proto;base64,"))throw new Error(`Expected response data to be base64 encode with a 'data:application/octet-stream;base64,' or 'data:application/grpc-web+proto;base64,' prefix, but found: ${m}`);u=o(m.split("data:application/grpc-web+proto;base64,")[1])}l(null,a(u.buffer,u.byteOffset,u.byteLength))}catch(t){l(t,null)}}}}export{p as default};
//# sourceMappingURL=NativeChannel.js.map
