import{ALL_WEB_NETWORK_NODES as t}from"../constants/ClientConstants.js";import r from"../grpc/GrpcServiceError.js";import s from"../grpc/GrpcStatus.js";import e from"../http/HttpError.js";import o from"../http/HttpStatus.js";import{SDK_VERSION as a}from"../version.js";import n,{encodeRequest as p,decodeUnaryResponse as c}from"./Channel.js";class i extends n{constructor(t){super(),this._address=t}close(){}_createUnaryClient(n){return async(i,l,m)=>{try{const u=await fetch(`${this._address}/proto.${n}/${i.name}`,{method:"POST",headers:{"content-type":"application/grpc-web+proto","x-user-agent":a,"x-grpc-web":"1"},body:p(l)});if(!u.ok){m(new e(o._fromValue(u.status)),null)}const f=u.headers.get("grpc-status"),d=u.headers.get("grpc-message");if(null!=f&&null!=d){const e=new r(s._fromValue(parseInt(f)),t[this._address].toString());e.message=d,m(e,null)}const g=await u.arrayBuffer();m(null,c(g))}catch(e){m(new r(s._fromValue(18),t[this._address].toString()),null)}}}}export{i as default};
//# sourceMappingURL=WebChannel.js.map
