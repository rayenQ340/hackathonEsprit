import{constructor as t,fromString as r,validateChecksum as s,fromSolidityAddress as e,toSolidityAddress as i,toStringWithChecksum as h,compare as o}from"../EntityIdHelper.js";import*as u from"@hashgraph/proto";class m{constructor(r,s,e){const i=t(r,s,e);this.shard=i.shard,this.realm=i.realm,this.num=i.num,this._checksum=null}static fromString(t){const s=r(t),e=new m(s);return e._checksum=s.checksum,e}static _fromProtobuf(t){return new m(null!=t.shardNum?t.shardNum:0,null!=t.realmNum?t.realmNum:0,null!=t.topicNum?t.topicNum:0)}get checksum(){return this._checksum}validate(t){console.warn("Deprecated: Use `validateChecksum` instead"),this.validateChecksum(t)}validateChecksum(t){s(this.shard,this.realm,this.num,this._checksum,t)}static fromBytes(t){return m._fromProtobuf(u.proto.TopicID.decode(t))}static fromSolidityAddress(t){const[r,s,i]=e(t);return new m(r,s,i)}toSolidityAddress(){return i([this.shard,this.realm,this.num])}_toProtobuf(){return{topicNum:this.num,shardNum:this.shard,realmNum:this.realm}}toString(){return`${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`}toStringWithChecksum(t){return h(this.toString(),t)}toBytes(){return u.proto.TopicID.encode(this._toProtobuf()).finish()}clone(){const t=new m(this);return t._checksum=this._checksum,t}compare(t){return o([this.shard,this.realm,this.num],[t.shard,t.realm,t.num])}}export{m as default};
//# sourceMappingURL=TopicId.js.map
